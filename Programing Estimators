#Complete the mean function to make it return the mean of a list of numbers

data1=[49., 66, 24, 98, 37, 64, 98, 27, 56, 93, 68, 78, 22, 25, 11]

def mean(data):
    return sum(data)/len(data)
print(mean(data1))


#Complete the median function to make it return the median of a list of numbers
def median(data):
    ord = sorted(data)
    ind = len(data)
    return ord[ind/2]    
print(median(data1))

#Complete the mode function to make it return the mode of a list of numbers
#opción 1:
def mode(data):
    modecnt = ()
    for i in range(len(data)):
    count = data.count(data[i])
    if count > modecnt:
        mode = data[i]
        modecnt = count
    return mode
print(mode(data1))

#opción 2 (dice no aprobado, pero no entiendo por que):
d = dict()
def mode(data):
    for i in range(len(data)):
        d[data[i]] = d.get(data[i],0) +1
    sort = sorted([(v,k) for k,v in d.items()], reverse=True)
    x, y = sort[0]
    
    return y#sort
    #return mode
print(mode(data1))

#Complete the variance function to make it return the variance of a list of numbers
#opcion 1:
def mean(data):
    return sum(data)/len(data)
    
def variance(data):
    mu = mean(data)
    for i in range(len(data)):
        data[i] = (data[i]-mu)**2
   
    return mean(data)#sum(data)
print(variance(data3))

#opcion 2:
def mean(data):
    return sum(data)/len(data)
    
def variance(data):
    mu = mean(data)
    return mean([((i-mu)**2) for i in data])
print(variance(data3))


#Complete the stddev function to make it return the standard deviation 
#of a list of numbers
from math import sqrt

data3=[13.04, 1.32, 22.65, 17.44, 29.54, 23.22, 17.65, 10.12, 26.73, 16.43]

def mean(data):
    return sum(data)/len(data)
def variance(data):
    mu=mean(data)
    return mean([(x-mu)**2 for x in data])
def stddev(data):
    #Insert your code here
    return sqrt(variance(data))
print(stddev(data3))




#Compute the likelihood of observing a sequence of die rolls
#Likelihood is the probability of getting the specific set of rolls 
#in the given order
#Given a multi-sided die whose labels and probabilities are 
#given by a Python dictionary called dist and a sequence (list, tuple, string) 
#of rolls called data, complete the function likelihood
#Note that an element of a dictionary can be retrieved by dist[key] where
#key is one of the dictionary's keys (e.g. 'A', 'Good'). 

def likelihood(dist,data):
    #Insert your answer here
    l = 1
    for i in data:
        l *= dist[i]
    return l

tests= [(({'A':0.2,'B':0.2,'C':0.2,'D':0.2,'E':0.2},'ABCEDDECAB'), 1.024e-07),(({'Good':0.6,'Bad':0.2,'Indifferent':0.2},['Good','Bad','Indifferent','Good','Good','Bad']), 0.001728),(({'Z':0.6,'X':0.333,'Y':0.067},'ZXYYZXYXYZY'), 1.07686302456e-08),(({'Z':0.6,'X':0.233,'Y':0.067,'W':0.1},'WXYZYZZZZW'), 8.133206112e-07)]

for t,l in tests:
    if abs(likelihood(*t)/l-1)<0.01: print 'Correct'
    else: print 'Incorrect'
